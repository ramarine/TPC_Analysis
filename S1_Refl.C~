// This works with Configuration_17, 18
// Plots many figures investigating the time distributions of signals in events.

//updated at 14September2022
//this is a newer version than the one used in the SharedScripts Folder
#include "TRandom.h"
#include "TF1.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TH3D.h"
#include "TProfile.h"
#include "TCanvas.h"
#include "TGraph.h"
#include "TMath.h"
#include <vector>
#include <math.h>       /* pow */
#include <iostream>

using namespace std::chrono;
using namespace std;


std::vector<double> AddWf(std::vector<double> *wf = NULL, std::vector<double> *rms = NULL,std::vector<double> wf_init = std::vector<double> (100000, 0), double NSigmas = 4.0 ){
  
  for (int i(0); i < wf->size(); i++){
    if (wf->at(i) < -NSigmas *rms->at(i))
      wf_init.at(i) += wf->at(i);
  }

  return wf_init;
} 

double GetDivError(double nom, double denom, double nom_err, double denom_err){
  return TMath::Sqrt(((nom_err*nom_err) / (denom*denom) ) + (nom*nom * denom_err*denom_err)/(denom*denom*denom*denom));
}


void PlotMultiWF(std::vector<int> idx,std::vector<TH1*> hist ,const char * file_name){

  TCanvas *c1 = new TCanvas("c1","sub data",200,10,700,500);

  const char * file_ = "h1.pdf";
  string first = std::string(file_)+std::string("(");
  string last =std::string(file_) +std::string(")");
  string mid = std::string(file_);
  

  
  for (int i(0); i < idx.size(); i++){
    //char first = file_name.c_str+"(";
    //char last = file_name.c_str+")";
    if (i==0){
      hist[i]->Draw();
      c1->Print(first.c_str(),"pdf0");
    }else if (i == idx.size() -1 ){
      hist[i]->Draw();
      c1->Print(last.c_str(),"pdf2");
    }else{
      hist[i]->Draw();
      c1->Print(file_name,"pdf1");
    }
  }




}

void S1_Refl(){

  TH1F *hWF = new TH1F ("hWF","", 100000, -20,80); 

  TH1F * hFirsts_dif = new TH1F("hFirst", "Time Difference Between Firsts Signals in Drift and Extended Region ;Time Difference [us]", 60, 0, 80);
  TH1F * hLasts = new TH1F("hLasts", "Time Difference Between Last Signals in Drift and Extended Region ;Time Difference [us]", 60, 0, 80);
  TH1F * hWidth_a = new TH1F("hWidth_a","Drift Region ; Width [us];"  , 100, 0, 80);
  TH1F * hWidth_b = new TH1F("hWidth_b","Extended Region ; Width [us];"   ,100, 0, 80);
  
  TH2F * hWidth_b_width_a = new TH2F("hFirsts_width_b","3. Time width in ext vs the time width in drift region;Time Width of Signal in the Drift [us]; Time Width of Signal in the Extended [us]",   100, 0, 40,60, 0, 40);
  
  TH2F * hFirsts_width_a = new TH2F("hFirsts_width_a","4. Time difference between the firsts vs the time width in drift region;Time Width of Signal in the Drift [us]; Time Diff Between Firsts [us]",   100, 0, 80,60, 0, 80);

  TH2F * hFirsts_Start_a = new TH2F("hFirsts_Start_a","4. Time difference between the firsts vs the time width in drift region; Start of Signal [us]; Time Diff Between Firsts [us]",   100, 0, 80,60, 0, 80);
  TH2F * hFirsts_Start_b = new TH2F("hFirsts_Start_b","4. Time difference between the firsts vs the time width in drift region; Start of Signal [us]; Time Diff Between Firsts [us]",   100, 0, 80,60, 0, 80);
  TH2F *h_Start_b_Start_a = new TH2F("h_Start_b_Start_a","4. Time difference between the firsts vs the time width in drift region; Start of Signal [us]; Start of signal [us]",   50, 0, 40,50, 40, 80);

  //  double const R(50.), gain(1e7), e_ch(1.6e-19), qe(0.25), col_eff(0.8), dt(1e-9);//gain = 1e7 for 1650V (Hamamtsu R6427)
  //double con_fact = - dt /(R* gain *e_ch*qe*col_eff);
  double con_fact = -0.05;
  std::vector<double> key_idx;
  std::vector<double> key_Intg;
  std::vector<double> key_min_a;

  // double const R(50.), gain(1e7), e_ch(1.6e-19), qe(0.25), col_eff(0.8), dt(1e-9);//gain = 1e7 for 1650V (Hamamtsu R6427)
  // double con_fact = - dt /(R* gain *e_ch*qe*col_eff);

  auto start = high_resolution_clock::now();

  std::vector<TString> path_store;


  path_store.push_back("../../Swan_TTrees/Configuration_18/C3500_LSF1480_ThGUp1400_ThGDnGND_PMesh1400_ii_TPC1650_a/");


  TString NSigmas_st = "4.0";
  double NSigmas = 6.0;
  std::vector<int> sig_evt;

  std::unique_ptr<TFile> myFile(TFile::Open(path_store.at(0)+"WF_output_5000_"+NSigmas_st+"RMS.root"));
  auto tree = myFile->Get<TTree>("T");
  std::vector<int> Spark_idx;
  std::vector<int> BadPed_idx;
  std::vector<int> Signal_idx;
  std::vector<int> Empty_idx;
  std::vector<double> intg_bef;
  std::vector<double> intg_aft;
  std::vector<double> intg_a;
  std::vector<double> intg_b;
  std::vector<double> dummy_intg(4,0);



  // std::vector<std::vector<double>> wf_store;
  // std::vector<std::vector<double>> rms_store;

  std::vector<double> *wf = new std::vector<double>;
  
  std::vector<double> *rms = new std::vector<double>;
  std::vector<int> MinIdxPerEvt;
  std::vector<int> signal_evt_idx;

  int trig_idx, nentries;
  Double_t dt, t0;
  Int_t  Signal;



  tree->SetBranchAddress("WF", &wf);
  tree->SetBranchAddress("RMS", &rms);
  tree->SetBranchAddress("dt", &dt);
  tree->SetBranchAddress("t0", &t0);
  tree->SetBranchAddress("trig_idx", &trig_idx);
  tree->SetBranchAddress("nentries", &nentries);
  tree->SetBranchAddress("Signal", &Signal);

  tree->GetEntry(0);
  std::vector<double> wf_sum(nentries, 0);

  //--
  //define some timeframe
  //-- 

  std::vector<double> time;
  cout << " nentries " << nentries << " t0 " << t0 << " dt " << dt <<endl; 
  for (int i(t0); i < nentries; i++){
    time.push_back(-20e-6 + i*dt);
    //cout << "time " << time.at(i)<<endl;
  }


  
  
  const double edgeremoval = 2.e-6;
  const double drift_time = 40.e-6;
  const double S1ReflTime = 35.e-6;
  const double extended_drift_time = 80.e-6;
  int const TrigTimeIdx = trig_idx + int(edgeremoval/dt);
  int const FirstCutIdx = TrigTimeIdx +int(20.e-6/dt);
  int const S1Refl_idx = trig_idx + int(S1ReflTime/dt);
  int const a_idx = trig_idx + int(drift_time/dt) - int(edgeremoval/dt);
  int const b_idx = trig_idx + int(drift_time/dt) + int(edgeremoval/dt);
  int const ab_idx = trig_idx + int(extended_drift_time/dt)-int(edgeremoval/dt);

  cout << " S1 Refl idx " << S1Refl_idx << endl;

  TBranch *BSignal = tree->GetBranch("Signal"); 

  std::vector<int> dummy_a;
  std::vector<int> dummy_b;
  
  std::vector<std::vector<int>> integral_500_signal_a;// this is a container keeping all the entries higher than the treshold
  std::vector<std::vector<int>> integral_500_signal_b;

  
  //cout << tree->GetBranch("Signal")->GetEntries() << endl;
  int tot_evt =100;
  //int tot_evt = tree->GetBranch("Signal")->GetEntries();
  
  //  cout << TrigTimeIdx << " " << a_idx << " " << ab_idx << endl;
  
  const char * file_name = "h1.pdf";
  int wf_count =0;
  // string first = std::string("h1_pdf")+std::string("(");
  // string last =std::string("h1_pdf") +std::string(")");
  // string mid = std::string("h1.pdf");
  
  
  string first = std::string(file_name)+std::string("(");
  string last =  std::string(file_name) +std::string(")");
  string mid = std::string(file_name);
  for (int i(0); i < tot_evt; i++){       
    tree -> GetEntry(i);
    signal_evt_idx.push_back(Signal);
    //cout << "Get Entry " << Signal<< endl;
  } 
  
  

  
  // The next two for loop go through all the signal events as defined in the TTree and select from the  signal WF all the hits higher than NSigma * rms. all the indices of these hits are stored in some temporary vectors. Hits are stored from two different regions: drift and extended. As in this analysis we are interested only in events containing reflection we will only store the vectors having signal both in the drift and extended version. 
  

  for (int i(0); i < signal_evt_idx.size(); i++ ){
    int incr_a = 0; // different than 0 if we have any hits within S1_Refl and a_idx
    int incr_b = 0;
    tree->GetEntry(signal_evt_idx.at(i));
    
    for (int j(0); j< wf->size(); j++){
      //hWF->SetBinContent(j+1,wf->at(j));
      if(TrigTimeIdx < j && j < a_idx){
	

	if(wf->at(j) < -NSigmas * rms->at(j)){
	  //store signal index in some vector;	  
	  dummy_a.push_back(j);
	  if (j > S1Refl_idx) incr_a++; 
	  
	}
	
      }
      
    }
    
 

    

    
    if (dummy_a.size() != 0){
      integral_500_signal_a.push_back(dummy_a);
      double first_hit_idx = dummy_a.at(0);
      //select the S1_Reflexion events: 
      if (incr_a != 0 && TrigTimeIdx  < first_hit_idx && first_hit_idx < FirstCutIdx ){
	wf_sum =  AddWf(wf,rms,wf_sum,NSigmas);
      }


    }
    dummy_a.clear();
    
  }


  //  cout << " debug " << endl;
  
  for (int i(0); i < nentries; i++) hWF->SetBinContent(i+1, wf_sum.at(i));
  
  double avg_a(0), avg_b(0), avg_a_ct(0), avg_b_ct(0), firsts(0), last_a(0), last_b(0), first_a(0),first_b(0), lasts(0), width_a(0), width_b(0), amp_A_First_a(0), amp_B_First_a(0), amp_C_First_a(0), amp_D_First_a(0.);
  
  cout <<  " Number of events containing S1 Reflexion  " << integral_500_signal_a.size()  << endl;
  TCanvas *cEventDisplay = new TCanvas("event_display","dum_display",0,0,800,600);
  hWF->Draw();
}



