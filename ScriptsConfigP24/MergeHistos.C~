#include <TROOT.h>
#include <TH2D.h>
#include <TMath.h>
#include <TRandom.h>
#include <TRandom3.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <TFile.h>
#include <stdio.h>      /* printf */
#include <math.h>       /* pow */
#include <iostream>


// I want a function which takes h1

using namespace std;


std::vector<double> GetMean_STD_NEntries(std::vector<double> & intg_a_values){
    
    auto v = intg_a_values;
    double sum = std::accumulate(v.begin(), v.end(), 0.0);
    double mean = sum / v.size(); 
    
    std::vector<double> diff(v.size());
    std::transform(v.begin(), v.end(), diff.begin(), std::bind2nd(std::minus<double>(), mean));
    double sq_sum = std::inner_product(diff.begin(), diff.end(), diff.begin(), 0.0);
    double stdev = std::sqrt(sq_sum / v.size());
    
    std::vector<double> dummy(3,0);
    dummy[0] = mean;
    dummy[1] = stdev;
    dummy[2] = v.size();
    
    return dummy;

  }

  

double GetDivError(double nom, double denom, double nom_err, double denom_err){
  return TMath::Sqrt(((nom_err*nom_err) / (denom*denom) ) + (nom*nom * denom_err*denom_err)/(denom*denom*denom*denom));
}

double GetAddError(double err_x, double err_y){
  return TMath::Sqrt((err_x*err_x) + (err_y*err_y));
}


double GetAvgError(std::vector<double> *error_vect = NULL){
  double dummy(0);
  for (int i(0); i < error_vect->size(); i++){
    dummy+= error_vect->at(i)* error_vect->at(i);
  }


  return TMath::Sqrt(dummy)/error_vect->size();
}



void MergeHistos(){


  //defining Stacks
  THStack *hsWFsum = new THStack("hsWF", " WF Sum (amplitudes higher than treshold);  Time (#mus); Equivalent Number of Photons ");


  double rebin_no = 5000;


  double const R(50.), gain(2.9e6), e_ch(1.6e-19), qe(0.25), col_eff(0.8), dt(1e-9);//gain = 1.21e7 for 1650V (Hamamtsu R6427), gain = 2.9e6 for 1370V
  //double phot_to_volt =1/( - dt /(R* gain *e_ch*qe*col_eff));// formula from my point of view
  double phot_to_volt =1/( - dt /(R* gain *e_ch));// formula from Federici's point of view
  double con_fact = phot_to_volt;// -0.05;
  //con_fact = phot_to_volt;
  std::cout <<  " Conversion factor (volt to photons): " << con_fact << endl;
  TString NSigmas = "4.0";
  std::vector<std::vector<TString>> path_store;

  path_store.push_back({});
  path_store[0].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh0_TPC1370_p1_0/");  
  //path_store[0].push_back("../../Swan_TTrees/Configuration_18/C3500_LSF1480_ThGUp1400_ThGDnGND_PMesh0_TPC1650_b/");

  //

  
  path_store.push_back({});
  path_store[1].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1370_p1_0_ii/");
  //path_store.push_back({});
  //path_store[1].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1370_p1_0_ii/");
  

  //  path_store.push_back({});
  //path_store[2].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh0_TPC1370_p2_0/");

  //    path_store.push_back({});
  // path_store[2].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1370_p1_0/");

  
  //path_store.push_back({});
  // path_store[2].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1370_p2_0/");
  
  path_store.push_back({});
  path_store[2].push_back("../../../Swan_TTrees/Configuration_P24/C4600_LSF2550_ThGUp2250_ThGDnGND_PMesh0_TPC1370_p2_0/");
  
  path_store.push_back({});
  path_store[3].push_back("../../../Swan_TTrees/Configuration_P24/C4600_LSF2550_ThGUp2250_ThGDnGND_PMesh427_TPC1370_p2_0_ii/");
 
  //path_store[1].push_back("../../Swan_TTrees/Configuration_18/C3500_LSF1480_ThGUp1400_ThGDnGND_PMesh100_ii_TPC1650_a/");
  //path_store[1].push_back("../../Swan_TTrees/Configuration_18/C3500_LSF1480_ThGUp1400_ThGDnGND_PMesh100_ii_TPC1650_b/");
  //
  //

  std::vector<std::vector<TFile*> > file_store (path_store.size(),std::vector<TFile*>(0));

  std::vector<std::vector<double> > HowManySignalEvt_ind(path_store.size(),std::vector<double>(0));
  std::vector<std::vector<double> > HowManyEmptyEvt_ind(path_store.size(),std::vector<double>(0));
  std::vector<std::vector<double> > HowManySparkEvt_ind(path_store.size(),std::vector<double>(0));


  std::vector<double> HowManySignalEvt(path_store.size(),0);
  std::vector<double> HowManyEmptyEvt(path_store.size(),0);
  std::vector<double> HowManySparkEvt(path_store.size(),0);



  std::vector<std::vector<TH1D*> > hWFsumFlat_ind_st(path_store.size(),std::vector<TH1D*>(0));
  std::vector<std::vector<TH1D*> > hWFsumRaw_st(path_store.size(),std::vector<TH1D*>(0));
  std::vector<std::vector<TH1D*> > hWFsum_Ratio_st(path_store.size(),std::vector<TH1D*>(0));


  std::vector<int> color_st;

  gStyle->SetPalette(kCividis);
  gStyle->SetPalette(kAlpine);
  gStyle->SetPalette(kBlueRedYellow);
  // gStyle->SetPalette(kGistEarth);
  //gStyle->SetPalette(kBrownCyan);
  //gStyle->SetPalette(kAtlantic);
  //  gStyle->SetPalette(kLightTemperature);
  auto cols = TColor::GetPalette();
  //cout << "cols size: " << cols.size() << endl;
  //for (int i(0); i < path_store.size(); i++){
  // color_st.push_back(cols.At(i*17));
  // // cout << cols.At(i) << endl;
  //}
  color_st.push_back(30);// 4 = blue
  color_st.push_back(12);// 4 = blue
  color_st.push_back(17);// 4 = blue
  color_st.push_back(4); // 4 = blue
  color_st.push_back(2); // 2 = red
  // color_st.push_back(1); // 1 = black
  // color_st.push_back(7); // 7 = cyan
  // color_st.push_back(6); //6 = magenta
  // color_st.push_back(48);// 48 = rose
  // color_st.push_back(12);// 48 = rose
  // color_st.push_back(52);// 48 = rose
  // color_st.push_back(14);// 48 = rose
  // color_st.push_back(21);// 48 = rose
  // color_st.push_back(27);// 48 = rose
  // color_st.push_back(38);// 48 = rose
  // color_st.push_back(39);// 48 = rose
  
  for (int i(0); i < path_store.size(); i++){
    for (int j(0); j < path_store.at(i).size(); j++ ){
      
      if (i ==0 || i == 1)      file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_5000_"+NSigmas+"RMS.root"));
      if (i == 2)      file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_1000_"+NSigmas+"RMS.root"));
      if (i == 3)      file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_330_"+NSigmas+"RMS.root"));
       
      auto tree = file_store.at(i).at(j)->Get<TTree>("T");
      hWFsumFlat_ind_st[i].push_back((TH1D*)file_store.at(i).at(j)->Get("hWFsum_FlatNorm"));
      hWFsumRaw_st[i].push_back((TH1D*)file_store.at(i).at(j)->Get("hWFsumRaw"));
      
      HowManySignalEvt_ind[i].push_back(tree->GetBranch("Signal")->GetEntries());
      HowManyEmptyEvt_ind[i].push_back(tree->GetBranch("Empty")->GetEntries());
      HowManySparkEvt_ind[i].push_back(tree->GetBranch("Spark")->GetEntries());
      
      if (i == 0 && j ==0) cout << "number of signal " <<tree->GetBranch("Signal")->GetEntries() << endl;
    }
  }

  
  for (int i(0); i<HowManySignalEvt_ind.size(); i++){
    for (int j(0); j<HowManySignalEvt_ind.at(i).size(); j++){
      HowManySignalEvt[i]+=HowManySignalEvt_ind.at(i).at(j);
      HowManyEmptyEvt[i]+=HowManyEmptyEvt_ind.at(i).at(j);
      HowManySparkEvt[i]+=HowManySparkEvt_ind.at(i).at(j);
    }
  }
  
  
  //------------------------------------------------------
  //--------Obtain WF SUM --------------
  //------------------------------------------------------
  
  
  std::vector<double> norm_st;
  std::vector<TH1D*> hWFsumFlat_st;
  
  for (int i(0); i< path_store.size(); i++){
    // TH1D* h1 = new TH1D("","",100000, -0.8e-3,0.2e-3);
    TH1D* h1 = hWFsumFlat_ind_st.at(i).at(0);
    double norm_dummy(0);
    for (int j(0); j< hWFsumFlat_ind_st.at(i).at(0)->GetNbinsX(); j++){
      double dummy =0;
      for (int z(0); z < path_store.at(i).size(); z++){
        dummy +=  hWFsumFlat_ind_st.at(i).at(z)->GetBinContent(j);
	//if (j == 0) norm_dummy +=HowManySignalEvt_ind.at(i).at(z) + HowManyEmptyEvt_ind.at(i).at(z);
	if (j == 0) norm_dummy += HowManySignalEvt_ind.at(i).at(z) ;
      }
      //cout << " norm_dummy " << norm_dummy << endl;
      h1->SetBinContent(j,dummy/norm_dummy/con_fact);//norm_dummy*con_fact
      // norm_store.push_back(norm_dummy);
      
    }

    h1->SetLineColor(color_st.at(i));
    h1->SetLineWidth(3);
    hWFsumFlat_st.push_back(h1);
    cout <<"at file " << i << " signal of " <<  norm_dummy << endl;

  }


  //-----------------------------------------------------------------
  //------------------------!! Obtain the SUM OF THE WF SUM !!----------
  // ----------------------------------------------------------------


  std::vector<double> ElGainTh(file_store.size(),0);
  std::vector<double> ElGainMonteiroMeas;
  std::vector<double> E_N_Monteiro;
  std::vector<double> RelElGainMonteiro_Meas;
  std::vector<double> E_N(file_store.size(),0);
  std::vector<double> V_PEN(file_store.size(),0);
  std::vector<double> RelElGainTh (file_store.size(),0);
  std::vector<double> RelElGainMeas_a (file_store.size(),0);
  std::vector<double> RelElGainMeas_a_ELcomp (file_store.size(),0);
  std::vector<double> RelElGainMeas_ab (file_store.size(),0);
  std::vector<double> RelElGainMeas_ab_ELcomp (file_store.size(),0);
  std::vector<double> AbsEL_Only (file_store.size(),0);
  std::vector<double> AbsEL_Only_ab (file_store.size(),0);
  std::vector<double> Err_AbsEL_Only (file_store.size(),0);

  int ThGEM_comp = 0;


  std::vector <double> SumOfWFSum_a(file_store.size(), 0);
  std::vector <double> SumOfWFSum_ab(file_store.size(), 0);
  //
  //
  //
    double ThGemContribution_a(0), ThGemContribution_ab(0);
    int ThGEMContrCount = 6;
    for (int i(0); i < file_store.size(); i++){
      // cout << "size " <<  hWFsumFlat_st.at(i)->GetNbinsX()<< endl;
      for (int j(0); j < hWFsumFlat_st.at(i)->GetNbinsX(); j++){
	if ( -0.07e-3 < hWFsumFlat_st.at(i)->GetBinCenter(j) && hWFsumFlat_st.at(i)->GetBinCenter(j) <-0.03e-3  ) {
	  SumOfWFSum_a.at(i) += hWFsumFlat_st.at(i)->GetBinContent(j);
	}

	if ( -0.02e-3 < hWFsumFlat_st.at(i)->GetBinCenter(j) && hWFsumFlat_st.at(i)->GetBinCenter(j) <0.02e-3  ){
	  SumOfWFSum_ab.at(i) += hWFsumFlat_st.at(i)->GetBinContent(j);
	}
      }




      //
    }


    V_PEN = {0., 100, 200, 300, 400, 500,600,700,800,900,1000,1100,1200,1300,1400};




  //-----------------------------------------------------------------
  //-----------------------------------------------------------------
  //------------------------Plots and Figure---------------------
  // ----------------------------------------------------------------
  //-----------------------------------------------------------------



  //-----------------------------------------------------------------
  //------------------------Plotting the WF Sums---------------------
  // ----------------------------------------------------------------

  // Re drawing the waveform sum histograms with x axis from -20 to 80

  

  for (int i = 0; i <  hWFsumFlat_st.size(); i++){
    hWFsumFlat_st.at(i)->Rebin(rebin_no);
    TH1D * h_dummy = new TH1D("","", hWFsumFlat_st.at(i)->GetNbinsX(), -20,80);
    for (int j(0); j < hWFsumFlat_st.at(i)->GetNbinsX(); j++ ){
      h_dummy->SetBinContent(j,hWFsumFlat_st.at(i)->GetBinContent(j));
    }
    h_dummy->GetYaxis()->SetTitleOffset(-.1);
    h_dummy->SetLineColor(color_st.at(i));
    h_dummy->SetLineWidth(3);
    hsWFsum->Add(h_dummy);

  }



  cout << "DEBUG " << endl;

  auto leg_WFsum = new TLegend(0.1,0.7,0.48,0.9);
  leg_WFsum->AddEntry(hWFsumFlat_st.at(0), "set 1 ","l");//800
  leg_WFsum->AddEntry(hWFsumFlat_st.at(1),"set 2 ","l");//800
  leg_WFsum->AddEntry(hWFsumFlat_st.at(2),"set 3","l");//800
  leg_WFsum->AddEntry(hWFsumFlat_st.at(3),"set 4","l");//800

  //-----------
  //Drawing waveform sums
  //-----------
  

  TCanvas *cWFsum = new TCanvas("cWFsum", " sum of waveform ", 800, 600);

  hsWFsum->Draw("nostack");
  leg_WFsum->Draw("same");

  std::vector<double>empty_4(file_store.size(),0);

  TCanvas * c_AbsYield = new TCanvas("Abs_Yield","", 800, 600);
  c_AbsYield->Divide(2,1);

  std::vector<double> pressure;
  pressure = {1, 2, 3, 4};
  TGraph *g_Abs = new TGraph(SumOfWFSum_a.size(),&pressure[0] , &SumOfWFSum_a[0]);

   
  g_Abs->GetYaxis()->SetTitleOffset(0.6);

  g_Abs ->SetLineColor(46);
  g_Abs ->SetLineWidth(2);
  g_Abs->SetFillColor(kBlack);
  g_Abs ->SetMarkerStyle(20);
  
  gStyle->SetOptFit(11111);

  //Fit over the linear EL graph

  gPad->Update();

  TMultiGraph *mg_AbsYield = new TMultiGraph();
  mg_AbsYield->SetTitle("Absolute Number of Photons Detected; Data Set (bar); Photon Number");
  mg_AbsYield->Add(g_Abs,"ALP");
  // mg_AbsYield->Add(g_ElAbs,"ALP");
  mg_AbsYield->Draw("ALP");

  auto leg_AbsYield = new TLegend(0.1,0.7,0.48,0.9);
  leg_AbsYield->AddEntry(g_Abs,"ThGEM + EL ","l");//800
  leg_AbsYield->Draw();
  gPad->Update();

  TGaxis *axis1 = new TGaxis(0,1850,13,1850,0,1400,510,"-");
  axis1->SetTitle("Mesh Voltage [V]");
  axis1->SetLabelSize(0.03);
  axis1->SetTitleSize(0.03);
  axis1->SetTitleOffset(1.1);
  // axis1->Draw();

  c_AbsYield->Write();


  TCanvas * c_Yield = new TCanvas("Yield","", 1200, 600);
  c_Yield->Divide(2,1);





 
 

  


  //----------------------------------//
  // Plots only made for the EL paper //
  //----------------------------------//

  TCanvas *cWFSum_0 = new TCanvas("cWFSum0","", 800,600);
  TH1D * h_test = new TH1D("","title;Time (#mus); Equivalent Number of Photons", hWFsumFlat_ind_st[0].at(0)->GetNbinsX(), -20,80);
  for (int i(0); i < hWFsumFlat_ind_st[0].at(0)->GetNbinsX(); i++){
    h_test->SetBinContent(i,hWFsumFlat_ind_st[3].at(0)->GetBinContent(i));
  }

  auto leg_SingleWF = new TLegend(0.1,0.7,0.48,0.9);

  char* title_SingleWF = Form("MESH %.0f V", V_PEN.at(2));
  leg_SingleWF->AddEntry(h_test,title_SingleWF,"l");//800



  leg_SingleWF->Draw("same");

  h_test->Draw();

  gPad->Modified();
  gPad->Update();


  
  
  
  
  

  
}
