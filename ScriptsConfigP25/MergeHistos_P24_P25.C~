#include <TROOT.h>
#include <TH2D.h>
#include <TMath.h>
#include <TRandom.h>
#include <TRandom3.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <TFile.h>
#include <stdio.h>      /* printf */
#include <math.h>       /* pow */
#include <iostream>


// I want a function which takes h1

using namespace std;


std::vector<double> GetMean_STD_NEntries(std::vector<double> & intg_a_values){
    
    auto v = intg_a_values;
    double sum = std::accumulate(v.begin(), v.end(), 0.0);
    double mean = sum / v.size(); 
    
    std::vector<double> diff(v.size());
    std::transform(v.begin(), v.end(), diff.begin(), std::bind2nd(std::minus<double>(), mean));
    double sq_sum = std::inner_product(diff.begin(), diff.end(), diff.begin(), 0.0);
    double stdev = std::sqrt(sq_sum / v.size());
    
    std::vector<double> dummy(3,0);
    dummy[0] = mean;
    dummy[1] = stdev;
    dummy[2] = v.size();
    
    return dummy;

  }

  

double GetDivError(double nom, double denom, double nom_err, double denom_err){
  return TMath::Sqrt(((nom_err*nom_err) / (denom*denom) ) + (nom*nom * denom_err*denom_err)/(denom*denom*denom*denom));
}

double GetAddError(double err_x, double err_y){
  return TMath::Sqrt((err_x*err_x) + (err_y*err_y));
}


double GetAvgError(std::vector<double> *error_vect = NULL){
  double dummy(0);
  for (int i(0); i < error_vect->size(); i++){
    dummy+= error_vect->at(i)* error_vect->at(i);
  }


  return TMath::Sqrt(dummy)/error_vect->size();
}



void MergeHistos(){

  gROOT->SetStyle("Plain");
  //defining Stacks
  THStack *hsWFsum = new THStack("hsWF", " WF Sum (amplitudes higher than treshold);  Time (#mus); Equivalent Number of Photons ");


  double rebin_no = 5000;


  double const R(50.),gain_1650(1e7) , gain(2.9e6), e_ch(1.6e-19), qe(0.25), col_eff(0.8), dt(1e-9);//gain = 1.21e7 for 1650V (Hamamtsu R6427), gain = 2.9e6 for 1370V
  //double phot_to_volt =1/( - dt /(R* gain *e_ch*qe*col_eff));// formula from my point of view
  double phot_to_volt =1/( - dt /(R* gain *e_ch));// formula from Federico's point of view
  double con_fact_P24 = phot_to_volt;// -0.05;
  double con_fact_P25 = 1/( - dt /(R* gain_1650 *e_ch));



  TString NSigmas = "4.0";
  std::vector<std::vector<TString>> path_store;



  path_store.push_back({});
  path_store[0].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh0_TPC1370_p1_0/");  

  path_store.push_back({});
  path_store[1].push_back("../../../Swan_TTrees/Configuration_P24/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1370_p1_0_ii/");
  
  path_store.push_back({});
  path_store[2].push_back("../../../Swan_TTrees/Configuration_P24/C4600_LSF2550_ThGUp2250_ThGDnGND_PMesh0_TPC1370_p2_0/");
  
  path_store.push_back({});
  path_store[3].push_back("../../../Swan_TTrees/Configuration_P24/C4600_LSF2550_ThGUp2250_ThGDnGND_PMesh427_TPC1370_p2_0_ii/");
  
  path_store.push_back({});
  path_store[4].push_back("../../../Swan_TTrees/Configuration_P24/C4500_LSF2450_ThGUp2150_ThGDnGND_PMesh0_TPC1370_p2_0/");
  
  path_store.push_back({});
  path_store[5].push_back("../../../Swan_TTrees/Configuration_P24/C4500_LSF2450_ThGUp2150_ThGDnGND_PMesh427_TPC1370_p2_0/");

  path_store.push_back({});
  path_store[6].push_back("../../../Swan_TTrees/Configuration_P25/C4500_LSF2450_ThGUp2150_ThGDnGND_PMesh0_TPC1650_p2_0/");

  path_store.push_back({});
  path_store[7].push_back("../../../Swan_TTrees/Configuration_P25/C4500_LSF2450_ThGUp2150_ThGDnGND_PMesh545_TPC1650_p2_0/");
  
  path_store.push_back({});
  path_store[8].push_back("../../../Swan_TTrees/Configuration_P25/C4600_LSF2550_ThGUp2250_ThGDnGND_PMesh0_TPC1650_p2_0/");

  path_store.push_back({});
  path_store[9].push_back("../../../Swan_TTrees/Configuration_P25/C4600_LSF2550_ThGUp2250_ThGDnGND_PMesh427_TPC1650_p2_0/");

  path_store.push_back({});
  path_store[10].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh0_TPC1650_p1_0/");
  
  path_store.push_back({});
  path_store[11].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1650_p1_0/");


  path_store.push_back({});
  path_store[12].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh545_TPC1650_p1_0/");

  path_store.push_back({});
  path_store[13].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh0_TPC1650_p1_2/");

  path_store.push_back({});
  path_store[14].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh427_TPC1650_p1_2/");

  path_store.push_back({});
  path_store[15].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh545_TPC1650_p1_2/");


  path_store.push_back({});
  path_store[16].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh962_TPC1650_p1_2/");

  path_store.push_back({});
  path_store[17].push_back("../../../Swan_TTrees/Configuration_P25/C3800_LSF1750_ThGUp1450_ThGDnGND_PMesh962_TPC1650_p1_2/");  

  std::vector<std::vector<TFile*> > file_store (path_store.size(),std::vector<TFile*>(0));  

  std::vector<std::vector<double> > HowManySignalEvt_ind(path_store.size(),std::vector<double>(0));
  std::vector<std::vector<double> > HowManyEmptyEvt_ind(path_store.size(),std::vector<double>(0));
  std::vector<std::vector<double> > HowManySparkEvt_ind(path_store.size(),std::vector<double>(0));


  std::vector<double> HowManySignalEvt(path_store.size(),0);
  std::vector<double> HowManyEmptyEvt(path_store.size(),0);
  std::vector<double> HowManySparkEvt(path_store.size(),0);



  std::vector<std::vector<TH1D*> > hWFsumFlat_ind_st(path_store.size(),std::vector<TH1D*>(0));
  std::vector<std::vector<TH1D*> > hWFsumRaw_st(path_store.size(),std::vector<TH1D*>(0));
  std::vector<std::vector<TH1D*> > hWFsum_Ratio_st(path_store.size(),std::vector<TH1D*>(0));


  std::vector<int> color_st;

  gStyle->SetPalette(kCividis);
  gStyle->SetPalette(kAlpine);
  gStyle->SetPalette(kBlueRedYellow);
  // gStyle->SetPalette(kGistEarth);
  //gStyle->SetPalette(kBrownCyan);
  //gStyle->SetPalette(kAtlantic);
  //  gStyle->SetPalette(kLightTemperature);
  auto cols = TColor::GetPalette();
  //cout << "cols size: " << cols.size() << endl;
  //for (int i(0); i < path_store.size(); i++){
  // color_st.push_back(cols.At(i*17));
  // // cout << cols.At(i) << endl;
  //}
  color_st.push_back(30);// 4 = blue
  color_st.push_back(12);// 4 = blue
  color_st.push_back(17);// 4 = blue
  color_st.push_back(4); // 4 = blue
  color_st.push_back(2); // 2 = red

  color_st.push_back(1); // 1 = black
  color_st.push_back(7); // 7 = cyan
  color_st.push_back(6); //6 = magenta
  color_st.push_back(48);// 48 = rose
  color_st.push_back(12);// 48 = rose
  color_st.push_back(52);// 48 = rose
  color_st.push_back(14);// 48 = rose
  color_st.push_back(21);// 48 = rose
  color_st.push_back(27);// 48 = rose
  color_st.push_back(38);// 48 = rose
  color_st.push_back(39);// 48 = rose
  color_st.push_back(40);// 48 = rose
  color_st.push_back(41);// 48 = rose
    

  for (int i(0); i < path_store.size(); i++){
    for (int j(0); j < path_store.at(i).size(); j++ ){
      
      
      if (i == 2 || i == 8 ){
	file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_1000_"+NSigmas+"RMS.root"));}
      else if(i == 3){
	file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_330_"+NSigmas+"RMS.root"));}
      else if(i == 4){
	file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_4000_"+NSigmas+"RMS.root"));
}
      else if(i == 6){
	file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_1500_"+NSigmas+"RMS.root"));
      }
      else if(i == 9){
	file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_800_"+NSigmas+"RMS.root"));
      }
      else file_store[i].push_back(TFile::Open(path_store.at(i).at(j)+"WF_output_5000_"+NSigmas+"RMS.root"));

      auto tree = file_store.at(i).at(j)->Get<TTree>("T");
      hWFsumFlat_ind_st[i].push_back((TH1D*)file_store.at(i).at(j)->Get("hWFsum_FlatNorm"));
      hWFsumRaw_st[i].push_back((TH1D*)file_store.at(i).at(j)->Get("hWFsumRaw"));
      
      HowManySignalEvt_ind[i].push_back(tree->GetBranch("Signal")->GetEntries());
      HowManyEmptyEvt_ind[i].push_back(tree->GetBranch("Empty")->GetEntries());
      HowManySparkEvt_ind[i].push_back(tree->GetBranch("Spark")->GetEntries());
      
      if (i == 0 && j ==0) cout << "number of signal " <<tree->GetBranch("Signal")->GetEntries() << endl;
    }
  }

  
  for (int i(0); i<HowManySignalEvt_ind.size(); i++){
    for (int j(0); j<HowManySignalEvt_ind.at(i).size(); j++){
      HowManySignalEvt[i]+=HowManySignalEvt_ind.at(i).at(j);
      HowManyEmptyEvt[i]+=HowManyEmptyEvt_ind.at(i).at(j);
      HowManySparkEvt[i]+=HowManySparkEvt_ind.at(i).at(j);
    }
  }
  
  
  //------------------------------------------------------
  //--------Obtain WF SUM --------------
  //------------------------------------------------------
  

  std::vector<double> norm_st;
  std::vector<TH1D*> hWFsumFlat_st;
  
  for (int i(0); i< path_store.size(); i++){
    // TH1D* h1 = new TH1D("","",100000, -0.8e-3,0.2e-3);
    TH1D* h1 = hWFsumFlat_ind_st.at(i).at(0);
    double norm_dummy(0);
    for (int j(0); j< hWFsumFlat_ind_st.at(i).at(0)->GetNbinsX(); j++){
      double dummy =0;
      for (int z(0); z < path_store.at(i).size(); z++){
        dummy +=  hWFsumFlat_ind_st.at(i).at(z)->GetBinContent(j);
	//if (j == 0) norm_dummy +=HowManySignalEvt_ind.at(i).at(z) + HowManyEmptyEvt_ind.at(i).at(z);
	if (j == 0) norm_dummy += HowManySignalEvt_ind.at(i).at(z) ;
      }
      //cout << " norm_dummy " << norm_dummy << endl;
      if (i < 6) h1->SetBinContent(j,dummy/norm_dummy/con_fact_P24);//norm_dummy*con_fact_P24
      else h1->SetBinContent(j,dummy/norm_dummy/con_fact_P25);//norm_dummy*con_fact_P24
      // norm_store.push_back(norm_dummy);
      
    }
    
    h1->SetLineColor(color_st.at(i));
    h1->SetLineWidth(3);
    hWFsumFlat_st.push_back(h1);
    cout <<"at file " << i << " signal of " <<  norm_dummy << endl;

  }


  //-----------------------------------------------------------------
  //------------------------!! Obtain the SUM OF THE WF SUM !!----------
  // ----------------------------------------------------------------


  std::vector<double> ElGainTh(file_store.size(),0);
  std::vector<double> ElGainMonteiroMeas;
  std::vector<double> E_N_Monteiro;
  std::vector<double> RelElGainMonteiro_Meas;
  std::vector<double> E_N(file_store.size(),0);
  std::vector<double> V_PEN(file_store.size(),0);
  std::vector<double> RelElGainTh (file_store.size(),0);
  std::vector<double> RelElGainMeas_a (file_store.size(),0);
  std::vector<double> RelElGainMeas_a_ELcomp (file_store.size(),0);
  std::vector<double> RelElGainMeas_ab (file_store.size(),0);
  std::vector<double> RelElGainMeas_ab_ELcomp (file_store.size(),0);
  std::vector<double> AbsEL_Only (file_store.size(),0);
  std::vector<double> AbsEL_Only_ab (file_store.size(),0);
  std::vector<double> Err_AbsEL_Only (file_store.size(),0);

  int ThGEM_comp = 0;


  std::vector <double> SumOfWFSum_a(file_store.size(), 0);
  std::vector <double> SumOfWFSum_ab(file_store.size(), 0);
  //
  //
  //
  double ThGemContribution_a(0), ThGemContribution_ab(0);
  int ThGEMContrCount = 6;
 
  for (int i(0); i < file_store.size(); i++){
    // cout << "size " <<  hWFsumFlat_st.at(i)->GetNbinsX()<< endl;
    for (int j(0); j < hWFsumFlat_st.at(i)->GetNbinsX(); j++){
      if ( -0.06e-3 < hWFsumFlat_st.at(i)->GetBinCenter(j) && hWFsumFlat_st.at(i)->GetBinCenter(j) <-0.02e-3  ) {
	SumOfWFSum_a.at(i) += hWFsumFlat_st.at(i)->GetBinContent(j);
      }
      
      if ( -0.02e-3 < hWFsumFlat_st.at(i)->GetBinCenter(j) && hWFsumFlat_st.at(i)->GetBinCenter(j) <0.02e-3  ){
	SumOfWFSum_ab.at(i) += hWFsumFlat_st.at(i)->GetBinContent(j);
      }
    }
    



    //
  }
  

  V_PEN = {0., 100, 200, 300, 400, 500,600,700,800,900,1000,1100,1200,1300,1400};
  


  
  //-----------------------------------------------------------------
  //-----------------------------------------------------------------
  //------------------------Plots and Figure---------------------
  // ----------------------------------------------------------------
  //-----------------------------------------------------------------
  
  
  
  //-----------------------------------------------------------------
  //------------------------Plotting the WF Sums---------------------
  // ----------------------------------------------------------------

  // Re drawing the waveform sum histograms with x axis from -20 to 80

  

  for (int i = 0; i <  hWFsumFlat_st.size(); i++){
    hWFsumFlat_st.at(i)->Rebin(rebin_no);
    TH1D * h_dummy = new TH1D("","", hWFsumFlat_st.at(i)->GetNbinsX(), -20,80);
    for (int j(0); j < hWFsumFlat_st.at(i)->GetNbinsX(); j++ ){
      h_dummy->SetBinContent(j,hWFsumFlat_st.at(i)->GetBinContent(j));
    }
    h_dummy->GetYaxis()->SetTitleOffset(-.1);
    h_dummy->SetLineColor(color_st.at(i));
    h_dummy->SetLineWidth(3);
    hsWFsum->Add(h_dummy);
    
  }
  


  auto leg_WFsum = new TLegend(0.1,0.7,0.48,0.9);
  for (int i(0); i < hWFsumFlat_st.size() ; i++){
    string bla = Form("set %d", i+1);
    leg_WFsum->AddEntry(hWFsumFlat_st.at(i), bla.c_str() ,"l");//800
}



  //-----------
  //Drawing waveform sums
  //-----------
  

  TCanvas *cWFsum = new TCanvas("cWFsum", " sum of waveform ", 800, 600);

  hsWFsum->Draw("nostack");
  leg_WFsum->Draw("same");

  std::vector<double>empty_4(file_store.size(),0);


  std::vector<double> mesh_volt;
  std::vector<double> E_N_3;
  std::vector<double> E_N_2;
  std::vector<double> ds_0_1;
  std::vector<double> ds_2_3;
  std::vector<double> ds_4_5;
  std::vector<double> ds_6_7;
  std::vector<double> ds_8_9;
  std::vector<double> ds_10_11_12;
  std::vector<double> ds_13_14_15;
  
  std::vector<double> rel_8_9;
  std::vector<double> rel_10_11_12;
  std::vector<double> rel_13_14_15;
  std::vector<double> ds_Config_18;
  std::vector<double> rel_Config_18;

  ds_0_1.push_back(SumOfWFSum_a.at(0));
  ds_0_1.push_back(SumOfWFSum_a.at(1));

  ds_2_3.push_back(SumOfWFSum_a.at(2));
  ds_2_3.push_back(SumOfWFSum_a.at(3));

  ds_4_5.push_back(SumOfWFSum_a.at(4));
  ds_4_5.push_back(SumOfWFSum_a.at(5));

  ds_6_7.push_back(SumOfWFSum_a.at(6));
  ds_6_7.push_back(SumOfWFSum_a.at(7));

  ds_8_9.push_back(SumOfWFSum_a.at(8));
  ds_8_9.push_back(SumOfWFSum_a.at(9));

  ds_10_11_12.push_back(SumOfWFSum_a.at(10));
  ds_10_11_12.push_back(SumOfWFSum_a.at(11));
  ds_10_11_12.push_back(SumOfWFSum_a.at(12));

  ds_13_14_15.push_back(SumOfWFSum_a.at(13));
  ds_13_14_15.push_back(SumOfWFSum_a.at(14));
  ds_13_14_15.push_back(SumOfWFSum_a.at(15));
  ds_13_14_15.push_back(SumOfWFSum_a.at(16));  
  ds_13_14_15.push_back(SumOfWFSum_a.at(17));

  ds_Config_18 = {433,636,860};
  int norm_term =1;

  // fill the relative yields
  for (int i(0); i < ds_10_11_12.size(); i++){
    rel_10_11_12.push_back(ds_10_11_12.at(i)/ds_10_11_12.at(norm_term));
    rel_13_14_15.push_back(ds_13_14_15.at(i)/ds_13_14_15.at(norm_term));
    rel_Config_18.push_back(ds_Config_18.at(i)/ds_Config_18.at(norm_term));
  }
  

  for (int i(0); i < ds_8_9.size(); i++){
    rel_8_9.push_back(ds_8_9.at(i)/ds_8_9.at(1));
}

  mesh_volt = {0, 6.6};
  E_N_3 = {0, 6.6, 8.4};
  E_N_2 = {0, 6.6};

 std:vector<double> E_N_p1_2 = {0, 5.47, 7,10, 12.3};
  std::vector<double>  mesh_volt_4 = {0, 8.4};
  TGraph *g_Abs = new TGraph(ds_0_1.size(),&mesh_volt[0] , &ds_0_1[0]);
  TGraph *g_Abs_2 = new TGraph(ds_2_3.size(),&mesh_volt[0] , &ds_2_3[0]);
  TGraph *g_Abs_3 = new TGraph(ds_4_5.size(),&mesh_volt[0] , &ds_4_5[0]);
  TGraph *g_Abs_4 = new TGraph(ds_6_7.size(),&mesh_volt_4[0] , &ds_6_7[0]);
  TGraph *g_Abs_5 = new TGraph(ds_8_9.size(),&mesh_volt[0] , &ds_8_9[0]);  
  TGraph *g_Abs_Config_18 = new TGraph(E_N_3.size(),&E_N_3[0] , &ds_Config_18[0]);  
 

 TGraph *g_Rel_5 = new TGraph(rel_8_9.size(),&E_N_2[0] , &rel_8_9[0]);  
  
  TGraph *g_Abs_6 = new TGraph(ds_10_11_12.size(),&E_N_3[0] , &ds_10_11_12[0]);
  TGraph *g_Rel_6 = new TGraph(rel_10_11_12.size(),&E_N_3[0] , &rel_10_11_12[0]);
  TGraph *g_Abs_7 = new TGraph(ds_13_14_15.size(),&E_N_p1_2[0] , &ds_13_14_15[0]);
  TGraph *g_Rel_7 = new TGraph(rel_13_14_15.size(),&E_N_p1_2[0] , &rel_13_14_15[0]);
  TGraph *g_Rel_Config_18 = new TGraph(rel_13_14_15.size(),&E_N_3[0] , &rel_Config_18[0]);

  g_Abs->GetYaxis()->SetTitleOffset(0.6);
  g_Abs ->SetLineColor(46);
  g_Abs ->SetLineWidth(2);
  g_Abs->SetFillColor(kBlack);
  g_Abs ->SetMarkerStyle(20);

  g_Abs_2->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_2 ->SetLineColor(30);
  g_Abs_2 ->SetLineWidth(2);
  g_Abs_2->SetFillColor(kBlack);
  g_Abs_2 ->SetMarkerStyle(20);


  g_Abs_3->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_3 ->SetLineColor(4);
  g_Abs_3 ->SetLineWidth(2);
  g_Abs_3->SetFillColor(kBlack);
  g_Abs_3 ->SetMarkerStyle(20);
 
  g_Abs_4->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_4 ->SetLineColor(17);
  g_Abs_4 ->SetLineWidth(2);
  g_Abs_4->SetFillColor(kBlack);
  g_Abs_4 ->SetMarkerStyle(20);


  g_Abs_5->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_5 ->SetLineColor(7);
  g_Abs_5 ->SetLineWidth(2);
  g_Abs_5->SetFillColor(kBlack);
  g_Abs_5 ->SetMarkerStyle(20);  

  g_Rel_5->GetYaxis()->SetTitleOffset(0.6);
  g_Rel_5 ->SetLineColor(7);
  g_Rel_5 ->SetLineWidth(2);
  g_Rel_5->SetFillColor(kBlack);
  g_Rel_5 ->SetMarkerStyle(20);  


  g_Abs_6->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_6 ->SetLineColor(8);
  g_Abs_6 ->SetLineWidth(2);
  g_Abs_6->SetFillColor(kBlack);
  g_Abs_6 ->SetMarkerStyle(20);  


  g_Abs_7->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_7 ->SetLineColor(9);
  g_Abs_7 ->SetLineWidth(2);
  g_Abs_7->SetFillColor(kBlack);
  g_Abs_7 ->SetMarkerStyle(20);  


  g_Rel_6->GetYaxis()->SetTitleOffset(0.6);
  g_Rel_6 ->SetLineColor(8);
  g_Rel_6 ->SetLineWidth(2);
  g_Rel_6->SetFillColor(kBlack);
  g_Rel_6 ->SetMarkerStyle(20);  



  g_Rel_7->GetYaxis()->SetTitleOffset(0.6);
  g_Rel_7 ->SetLineColor(9);
  g_Rel_7 ->SetLineWidth(2);
  g_Rel_7->SetFillColor(kBlack);
  g_Rel_7 ->SetMarkerStyle(20);  

  g_Rel_Config_18 ->GetYaxis()->SetTitleOffset(0.6);
  g_Rel_Config_18 ->SetLineColor(2);
  g_Rel_Config_18 ->SetLineWidth(2);
  g_Rel_Config_18 ->SetFillColor(kBlack);
  g_Rel_Config_18 ->SetMarkerStyle(20);  

  g_Abs_Config_18 ->GetYaxis()->SetTitleOffset(0.6);
  g_Abs_Config_18 ->SetLineColor(2);
  g_Abs_Config_18 ->SetLineWidth(2);
  g_Abs_Config_18 ->SetFillColor(kBlack);
  g_Abs_Config_18 ->SetMarkerStyle(20);  

  gStyle->SetOptFit(11111);


  TMultiGraph *mg_P24 = new TMultiGraph();
  TMultiGraph *mg_P25 = new TMultiGraph();
  TMultiGraph *mg_P24_P25 = new TMultiGraph();
  TMultiGraph *mg_P25_LowP = new TMultiGraph();
  TMultiGraph *mg_P25_LowP_Abs = new TMultiGraph();
  TMultiGraph *mg_P25_Max = new TMultiGraph();
  TMultiGraph *mg_Rel = new TMultiGraph();
  TMultiGraph *mg_Rel_Max = new TMultiGraph();



  mg_P24->SetTitle("Absolute Number of Photons Detected; EL gap E/N (Td); Photon Number");
  mg_P25->SetTitle("Absolute Number of Photons Detected; EL gap E/N (Td); Photon Number");
  mg_P24_P25->SetTitle("Absolute Number of Photons Detected; EL gap E/N (Td); Photon Number");
  mg_P25_LowP->SetTitle("Absolute Number of Photons Detected; EL gap E/N (Td); Photon Number");

  mg_P25_LowP_Abs->SetTitle("Absolute Number of Photons Detected; EL gap E/N (Td); Photon Number");

  mg_P24->GetYaxis()->SetRangeUser(10,60);
  mg_P25->GetYaxis()->SetRangeUser(10,60);

  mg_P24->GetXaxis()->SetLimits(-1,9);
  mg_P25->GetXaxis()->SetLimits(-1,9);

  mg_Rel->GetYaxis()->SetRangeUser(0,2);
  mg_Rel_Max->GetYaxis()->SetRangeUser(0,2);
  mg_Rel->GetXaxis()->SetLimits(-1,10);
  mg_Rel_Max->GetXaxis()->SetLimits(-1,10);
  

  mg_P24->Add(g_Abs,"ALP");
  mg_P24->Add(g_Abs_2,"ALP");
  mg_P24->Add(g_Abs_3,"ALP");
  mg_P25->Add(g_Abs_4,"ALP");
  mg_P25->Add(g_Abs_5,"ALP");
  mg_P25->Add(g_Abs_6,"ALP");

  mg_P24_P25->Add(g_Abs_2,"ALP");
  mg_P24_P25->Add(g_Abs_5,"ALP");

  mg_P25_LowP->Add(g_Abs_5,"ALP");
  mg_P25_LowP->Add(g_Abs_6,"ALP");
  mg_P25_LowP->Add(g_Abs_7,"ALP");



  mg_P25_LowP_Abs->Add(g_Abs_6,"ALP");
  mg_P25_LowP_Abs->Add(g_Abs_7,"ALP");
  mg_P25_LowP_Abs->Add(g_Abs_Config_18,"ALP");
  

  mg_P25_Max->Add(g_Abs_5, "ALP");
  mg_P25_Max->Add(g_Abs_6, "ALP");


  mg_Rel->Add(g_Rel_6,"ALP");
  mg_Rel->Add(g_Rel_7,"ALP");
  mg_Rel->Add(g_Rel_Config_18,"ALP");

  mg_Rel_Max->Add(g_Rel_5,"ALP");
  mg_Rel_Max->Add(g_Rel_6,"ALP");


  auto leg_P24 = new TLegend(0.1,0.7,0.48,0.9);
  auto leg_P25 = new TLegend(0.1,0.7,0.48,0.9);
  auto leg_P24_P25 = new TLegend(0.1,0.7,0.48,0.9);
  auto leg_P25_LowP = new TLegend(0.1,0.7,0.48,0.9);
  auto leg_Rel= new TLegend(0.1,0.7,0.48,0.9);
  auto leg_Rel_Max= new TLegend(0.1,0.7,0.48,0.9);
  auto leg_Abs_Max= new TLegend(0.1,0.7,0.48,0.9);
  auto leg_mg_P25_Max= new TLegend(0.1,0.7,0.48,0.9);
  auto leg_mg_P25_LowP = new TLegend(0.1,0.7,0.48,0.9);
  leg_mg_P25_LowP->AddEntry(g_Rel_Config_18," EL Paper: 1 bar / ThGEM 1400, PMT 1650 V","l");//800
  leg_mg_P25_LowP->AddEntry(g_Abs_6," 1 bar / ThGEM 1450, PMT 1650 V","l");//800//800
  leg_mg_P25_LowP->AddEntry(g_Abs_7," 1.2 bar / ThGEM 1450, PMT 1650 V","l");//800

  leg_mg_P25_Max->AddEntry(g_Abs_6," 1 bar / ThGEM 1450, PMT 1650 V","l");//800//800
  leg_mg_P25_Max->AddEntry(g_Abs_5," 2 bar / ThGEM 2250, PMT 1650 V","l");//800
  leg_P24->AddEntry(g_Abs," 1 bar / ThGEM 1450, PMT 1370 V","l");//800
  leg_P24->AddEntry(g_Abs_2," 2 bar / ThGEM 2250, PMT 1370 V","l");//800
  leg_P24->AddEntry(g_Abs_3," q 2 bar / ThGEM 2150, PMT 1370 V","l");//800
  leg_P25->AddEntry(g_Abs_4," 2 bar / ThGEM 2150, PMT 1650 V","l");//800
  leg_P25->AddEntry(g_Abs_5," 2 bar / ThGEM 2250, PMT 1650 V","l");//800
  leg_P25_LowP->AddEntry(g_Abs_6," 1 bar / ThGEM 1450, PMT 1650 V","l");//800
  leg_P25_LowP->AddEntry(g_Abs_7," 1.2 bar / ThGEM 1450, PMT 1650 V","l");//800
  leg_P25_LowP->AddEntry(g_Abs_5," 2 bar / ThGEM 2250, PMT 1650 V","l");//800
  leg_P24_P25->AddEntry(g_Abs_2," 2 bar / ThGEM 2250, PMT 1370 V","l");//800
  leg_P24_P25->AddEntry(g_Abs_5," 2 bar / ThGEM 2250, PMT 1650 V","l");//800
  

  leg_Rel_Max->AddEntry(g_Rel_5," 2 bar / ThGEM 2250, PMT 1650 V","l");//800
  leg_Rel_Max->AddEntry(g_Rel_6," 1 bar / ThGEM 1450, PMT 1650 V","l");//800
  leg_Rel->AddEntry(g_Rel_6," 1 bar / ThGEM 1450, PMT 1650 V","l");//800
  leg_Rel->AddEntry(g_Rel_7," 1.2 bar / ThGEM 1450, PMT 1650 V","l");//800
  leg_Rel->AddEntry(g_Rel_Config_18," EL Paper: 1 bar / ThGEM 1400, PMT 1650 V","l");//800
 
  for (int i(0); i <  ds_13_14_15.size(); i++){
    cout << ds_13_14_15.at(i) << " debug " << endl;
    
  }
 
  TCanvas * c_AbsYield = new TCanvas("Abs_Yield","", 1200, 1200);
  c_AbsYield->Divide(2,2);
  c_AbsYield->cd(1);
  mg_P24->Draw("ALP");
  leg_P24->Draw("same");
  
  c_AbsYield->cd(2);
  mg_P25->Draw("ALP");
  leg_P25->Draw();
  

  c_AbsYield->cd(3);
  mg_P24_P25->Draw("ALP");
  leg_P24_P25->Draw();

  c_AbsYield->cd(4);
  mg_P25_LowP->Draw("ALP");
  leg_P25_LowP->Draw();


  TCanvas * c_RelYield = new TCanvas("Rel_Yield","", 1200, 600);
  c_RelYield->Divide(2,1);
  c_RelYield->cd(1);
  
  mg_Rel->Draw("ALP");
  leg_Rel->Draw();

  c_RelYield->cd(2);
  mg_Rel_Max->Draw("ALP");
  leg_Rel_Max->Draw();


  TCanvas * c_AbsYield_Max = new TCanvas("Abs_Yield_Max","", 1200, 600);
    
  c_AbsYield_Max->Divide(2,1);
  c_AbsYield_Max->cd(1);
  mg_P25_LowP_Abs-> Draw("ALP");
  leg_mg_P25_LowP->Draw();
  c_AbsYield_Max->cd(2);
  mg_P25_Max->Draw("ALP");
  leg_mg_P25_Max->Draw();
  //----------------------------------//
  // Plots only made for the EL paper //
  //----------------------------------//
  
  TCanvas * cWFSum_0 = new TCanvas("cWFSum0","", 800,600);
  TH1D * h_test = new TH1D("","title;Time (#mus); Equivalent Number of Photons", hWFsumFlat_ind_st[0].at(0)->GetNbinsX(), -20,80);

  for (int i(0); i < hWFsumFlat_ind_st[0].at(0)->GetNbinsX(); i++){
    h_test->SetBinContent(i,hWFsumFlat_ind_st.back().at(0)->GetBinContent(i));
  }
  auto leg_SingleWF = new TLegend(0.1,0.7,0.48,0.9);
  
  char* title_SingleWF = Form("MESH %.0f V", V_PEN.at(2));
  leg_SingleWF->AddEntry(h_test,title_SingleWF,"l");//800
  leg_SingleWF->Draw("same");
  
  h_test->Draw();
  
  gPad->Modified();
  gPad->Update();
  
  
}
